/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/bankruptcy.js":
/*!******************************!*\
  !*** ./src/js/bankruptcy.js ***!
  \******************************/
/***/ (() => {

eval("var opts = {\r\n    lines: 13, // The number of lines to draw\r\n    length: 38, // The length of each line\r\n    width: 17, // The line thickness\r\n    radius: 45, // The radius of the inner circle\r\n    scale: .3, // Scales overall size of the spinner\r\n    corners: 1, // Corner roundness (0..1)\r\n    color: '#43088e', // CSS color or array of colors\r\n    fadeColor: 'transparent', // CSS color or array of colors\r\n    speed: 1, // Rounds per second\r\n    rotate: 0, // The rotation offset\r\n    animation: 'spinner-line-fade-default', // The CSS animation name for the lines\r\n    direction: 1, // 1: clockwise, -1: counterclockwise\r\n    zIndex: 2e9, // The z-index (defaults to 2000000000)\r\n    className: 'spinner', // The CSS class to assign to the spinner\r\n    top: '35px', // Top position relative to parent\r\n    left: '50%', // Left position relative to parent\r\n    shadow: '0 0 1px transparent', // Box-shadow for the lines\r\n    position: 'relative' // Element positioning\r\n};\r\n\r\nasync function bankruptcy() {\r\n    const ph = `ctl00$mainContentPlaceHolder$taskSearchControl$`\r\n\r\n    //Remove Address control\r\n    document.getElementById(\"DebtorAddressCtrl\").remove();\r\n\r\n    //Make a template for controls\r\n    const ctrlTemplate = (props) => `\r\n    <table id=\"${props.Ctrl}\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" class=\"Ctrl\">\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <div class=\"menu-header\">\r\n                        <span id=\"${props.header}\" >${props.name}</span>\r\n                    </div>\r\n                    <div id=\"${props.body}\">\r\n                        <table class=\"bordertable\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td class=\"tdRowspace\"></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td id=\"${props.id}\" style=\"padding:6px\">\r\n                                        <div class=\"placeholder\" id=\"${props.id}1\"></div>\r\n                                        <table class=\"target\"></table>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>`\r\n\r\n    //Create debtor bankruptcy control\r\n    const bankruptcyCtrl = ctrlTemplate({ Ctrl: \"DebtorBankruptcyCtrl\", id: \"apps\", header: \"DebtorBankruptcyCtrl_lblDebtorBankruptcyNotifications\", name: \"Debtor: Bankruptcy Notifications\", body: \"DebtorBankruptcyCtrll_debtorBankruptcyNotification\" })\r\n\r\n    //Create register control\r\n    const registerCtrl = ctrlTemplate({ Ctrl: \"BankruptcyRegisterCtrl\", id: \"reg\", header: \"DebtorRegisterCtrl_lblBankrutcyRegister\", name: \"Bankruptcy Register\", body: \"DebtorRegisterCtrll_BankrutcyRegister\" })\r\n\r\n    //Get container for controls\r\n    const dataArea = document.querySelector(\"td.dataArea\")\r\n\r\n    //Append debtor bankruptcy control to DOM\r\n    dataArea.insertAdjacentHTML('beforeend', bankruptcyCtrl);\r\n\r\n    //Append register control to DOM\r\n    dataArea.insertAdjacentHTML('beforeend', registerCtrl);\r\n\r\n    //Add buttons\r\n    addButtons(\"#DebtorBankruptcyCtrl\", \"New Application\")\r\n    addButtons(\"#BankruptcyRegisterCtrl\", \"Check Holds\")\r\n\r\n    //Add spinner\r\n    var regSpinner = new Spin.Spinner(opts).spin(document.getElementById(\"reg1\"));\r\n    var appsSpinner = new Spin.Spinner(opts).spin(document.getElementById(\"apps1\"));\r\n\r\n    //Get stateless task page\r\n    let taskPage = await getHTMLDocument(`https://${document.location.host.split('.')[0]}.view.civicacloud.com.au/Taskflow/Forms/Management/TaskMaintenance.aspx?ProcessMode=User`, \"get\");\r\n\r\n    //Get form data from task page\r\n    let formData = getFormData(taskPage, {\r\n        [`${ph}statusText`]: \"OPEN\",\r\n        [`${ph}taskTypeText`]: \"FVBANKRUPT\",\r\n        [`${ph}taskSearchButton.x`]: 0,\r\n        [`${ph}taskSearchButton.y`]: 0\r\n    })\r\n\r\n    //Get stateful task page\r\n    taskPage = await getHTMLDocument(`https://${document.location.host.split('.')[0]}.view.civicacloud.com.au/Taskflow/Forms/Management/TaskMaintenance.aspx?ProcessMode=User`, \"post\", formData);\r\n\r\n    //Get full results if more than 5\r\n    if (taskPage.querySelector('[id*=\"goToPageText\"]') !== null) {\r\n        formData = getFormData(taskPage, {\r\n            [`${ph}goToPageText`]: \"00\",\r\n            [`${ph}goToButton.x`]: 0,\r\n            [`${ph}goToButton.y`]: 0\r\n        })\r\n\r\n        taskPage = await getHTMLDocument(`https://${document.location.host.split('.')[0]}.view.civicacloud.com.au/Taskflow/Forms/Management/TaskMaintenance.aspx?ProcessMode=User`, \"post\", formData);\r\n    }\r\n\r\n    //Sanitise table\r\n    const table = sanitiseTable(taskPage.querySelector(\"#ctl00_mainContentPlaceHolder_taskSearchControl_taskSearchGrid\"))\r\n\r\n    //Convert table to array of objects\r\n    let tableData = parseTable(table);\r\n\r\n    //Remove white space and special characters from property keys\r\n    tableData = tableData.map(function (row) {\r\n        const newRow = {};\r\n        Object.keys(row).forEach(function (key) {\r\n            newRow[key.replace(/\\.|\\-|\\?|[(]|\\//g, \"\").replace(/\\)/g, \"\").replace(/ /g, \"\").trim()] = row[key]\r\n        });\r\n        return newRow;\r\n    });\r\n\r\n    //Expand task description\r\n    tableData = tableData.map(row => {\r\n        const descriptionArray = row.Description.split(/:|,/);\r\n        const descriptionObject = { \"Status\": \"\", \"AFSA Reference\": \"\", \"Date of Bankruptcy\": \"\" };\r\n        let newRow = {};\r\n        descriptionArray.some(function (item, index) {\r\n            if (index % 2 === 0 && descriptionArray.length > 1) {\r\n                console.log(descriptionObject)\r\n                descriptionObject[item.trim()] = descriptionArray[index + 1].trim();\r\n            }\r\n            return (index > 4);\r\n        });\r\n        descriptionObject[\"Date of Bankruptcy\"] = descriptionObject[\"Date of Bankruptcy\"].substring(0,10);\r\n        newRow.TaskId = `<a href = 'https://${window.location.host.split('.')[0]}.view.civicacloud.com.au/Taskflow/Forms/Management/TaskMaintenance.aspx?TaskId=${row.TaskId}&ProcessMode=User'>${row.TaskId}</a>`;\r\n        newRow.TaskIdRaw = row.TaskId;\r\n        newRow.DebtorId = row.ModRef;\r\n        newRow.ModRef = `<a href='javascript:document.getElementById(\"DebtorDetailsCtrl_DebtorIdSearch\").value = ${row.ModRef}; document.getElementById(\"DebtorDetailsCtrl_debtorIdTextBoxButton\").click()'>${row.ModRef}</a>`;\r\n        newRow.TaskType = row.TaskType;\r\n        return newRow = { ...newRow, ...descriptionObject }\r\n    })\r\n\r\n    $.fn.dataTable.moment('DD/MM/YYYY');\r\n\r\n    //Create register datatable\r\n    const registerDataTable = makeDataTable(tableData, \"#reg > table\", [\r\n        { \"data\": \"TaskId\", \"title\": \"Task Id\" },\r\n        { \"data\": \"Status\", \"title\": \"Status\", \"width\": \"100%\" },\r\n        { \"data\": \"AFSA Reference\", \"title\": \"AFSA Reference\" },\r\n        { \"data\": \"Date of Bankruptcy\", \"title\": \"Date of Bankruptcy\" },\r\n        { \"data\": \"ModRef\", \"title\": \"Debtor ID\" },\r\n        { \"data\": \"DebtorId\", \"title\": \"DebtorId\", \"visible\": false },\r\n        { \"data\": \"TaskIdRaw\", \"title\": \"TaskIdRaw\", \"visible\": false },\r\n    ], [\r\n        {\r\n            extend: 'excelHtml5',\r\n            autoFilter: true,\r\n            title: null,\r\n            filename: function () {\r\n                return \"Bankruptcy and Debt Agreements Register - As of \" + moment(new Date()).format(\"DD-MM-YYYY\")\r\n            },\r\n            exportOptions: {\r\n                columns: ':visible'\r\n            }\r\n        }\r\n    ]);\r\n\r\n    //Get rows, if any, that match current debtor id\r\n    var indexes = registerDataTable.rows().eq(0).filter(function (rowIdx) {\r\n        return registerDataTable.cell(rowIdx, 5).data() === document.getElementById(\"DebtorDetailsCtrl_DebtorIdSearch\").value.trim() ? true : false;\r\n    });\r\n\r\n    //Extract the rows from the register data table that match current debtor id\r\n    const debtorTable = registerDataTable.rows(indexes).data(0).toArray();\r\n\r\n    //Create datatable for current debtor\r\n    const debtorDataTable = makeDataTable(debtorTable, \"#apps > table\", [\r\n        { \"data\": \"TaskId\", \"title\": \"Task Id\" },\r\n        { \"data\": \"Status\", \"title\": \"Status\", \"width\": \"100%\" },\r\n        { \"data\": \"AFSA Reference\", \"title\": \"AFSA Reference\" },\r\n        { \"data\": \"Date of Bankruptcy\", \"title\": \"Date of Bankruptcy\" },\r\n        { \"data\": null, \"title\": \"Actions\", \"defaultContent\": `<span class=\"updateButton mybutton\" onClick='return false;'>Update</span>` }\r\n    ], []);\r\n\r\n    //Remove spinners\r\n    document.querySelectorAll(\".placeholder\").forEach(element => element.remove())\r\n\r\n    //Add gridheader class to table rows\r\n    document.querySelectorAll(\".target > thead > tr\").forEach(element => element.className = \"gridheader\");\r\n\r\n    document.querySelectorAll(\".updateButton\").forEach(element => {\r\n        element.addEventListener(\"mouseup\", function () {\r\n            postData(\r\n                {\r\n                    taskNote: \"updateBankruptcy\",\r\n                    source: document.location.host.split('.')[0],\r\n                    debtorid: document.getElementById('DebtorDetailsCtrl_DebtorIdSearch').value,\r\n                    taskId: element.parentElement.parentElement.firstElementChild.textContent,\r\n                    pages: [\"uploadDocuments\", \"bankruptcyDate\", \"removeHolds\", \"placeHolds\", \"liftProceduralHolds\", \"proceduralHolds\", \"taskNote\", \"application\", \"letter\", \"finish\"]\r\n                }\r\n            )\r\n        });\r\n    });\r\n}\r\n\r\nbankruptcy();\r\n\r\nasync function getHTMLDocument(url, method, body) {\r\n    let parser = new DOMParser();\r\n    const opts = {\r\n        method: method,\r\n    }\r\n    if (body) { opts.body = new URLSearchParams(body) }\r\n    let res = await fetch(url, opts)\r\n    let resText = await res.text()\r\n    return (parser.parseFromString(resText, \"text/html\"));\r\n}\r\n\r\nfunction getFormData(parsedDocument, formDataToAppend) {\r\n    const formData = new FormData(parsedDocument.querySelector('form'))\r\n    for (let [key, value] of Object.entries(formDataToAppend)) {\r\n        formData.set(key, value);\r\n    }\r\n    return formData;\r\n}\r\n\r\nfunction sanitiseTable(table) {\r\n    const headerRow = table.firstElementChild.firstElementChild;\r\n    const thead = document.createElement('thead');\r\n    table.insertAdjacentElement('afterbegin', thead);\r\n    thead.append(headerRow);\r\n    return table\r\n}\r\n\r\nfunction setAttributes(el, attrs) {\r\n    for (var key in attrs) {\r\n        el.setAttribute(key, attrs[key]);\r\n    }\r\n}\r\n\r\nfunction makeDataTable(tableData, target, columns, buttons) {\r\n    const opts = {\r\n        \"data\": tableData,\r\n        \"dom\": 'rt<\"clear\"><\"bottom\"lpi>fB',\r\n        \"pageLength\": 10,\r\n        \"lengthMenu\": [\r\n            [-1, 5, 10, 20, 30, 40, 50],\r\n            [\r\n                \"All Records\",\r\n                \"5 Records per page\",\r\n                \"10 Records per page\",\r\n                \"20 Records per page\",\r\n                \"30 Records per page\",\r\n                \"40 Records per page\",\r\n                \"50 Records per page\"\r\n            ]\r\n        ],\r\n        \"bFilter\": false,\r\n        \"language\": {\r\n            \"emptyTable\": \"No current notification of bankruptcy\"\r\n        },\r\n        \"oLanguage\": {\r\n            \"sInfo\": \"<b>Results</b>: _START_-_END_ of _TOTAL_\",\r\n            \"sLengthMenu\": \"_MENU_\",\r\n            \"oPaginate\": {\r\n                \"sNext\": \"Next >>\",\r\n                \"sPrevious\": \"&lt&lt Last\"\r\n            },\r\n        }\r\n    }\r\n\r\n    buttons && (opts.buttons = buttons)\r\n\r\n    opts.columns = columns;\r\n\r\n    const dataTable = $(document.querySelector(target)).DataTable(opts)\r\n    return dataTable;\r\n}\r\n\r\nfunction postData(data) {\r\n    chrome.runtime.sendMessage({\r\n        validate: new URL(document.location).searchParams.get(\"mode\"),\r\n        data: data\r\n    })\r\n}\r\n\r\nfunction addButtons(parentElement, buttonText) {\r\n    const tr = document.createElement('tr');\r\n    const td = document.createElement('td');\r\n    const button = document.createElement('span');\r\n    tr.append(td);\r\n    td.append(button);\r\n    button.innerText = buttonText;\r\n    setAttributes(button, {\r\n        onclick: \"return false\",\r\n        style: \"cursor: hand\",\r\n        class: \"mybutton\"\r\n    });\r\n    setAttributes(td, {\r\n        class: \"tdButtons\",\r\n        align: \"right\"\r\n    });\r\n    document.querySelector(`${parentElement} .bordertable > tbody`).insertAdjacentElement('beforeend', tr);\r\n    button.addEventListener(\"mouseup\", function () {\r\n        if (!confirm(\"Are you sure you wish to create a new bankruptcy task?\")) return;\r\n        postData({\r\n            taskNote: \"createBankruptcy\",\r\n            source: document.location.host.split('.')[0],\r\n            debtorid: document.getElementById('DebtorDetailsCtrl_DebtorIdSearch').value,\r\n            pages: [\"bankruptcyDate\", \"removeHolds\", \"placeHolds\", \"liftProceduralHolds\", \"proceduralHolds\", \"letter\", \"uploadDocuments\", \"application\", \"debtorNote\", \"taskNote\", \"finish\"]\r\n        })\r\n    });\r\n}\n\n//# sourceURL=webpack://Toolkit-for-VIEW/./src/js/bankruptcy.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/bankruptcy.js"]();
/******/ 	
/******/ })()
;